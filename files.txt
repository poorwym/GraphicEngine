>>> 文件: ./src/AABB.h <<<
#pragma once
#include "glm/glm.hpp"

struct AABB {
    glm::vec3 min;
    float pad1;
    glm::vec3 max;
    float pad2;
};


>>> 文件: ./src/AnimationSystem.h <<<
#pragma once
#include "Entity.h"
class AnimationSystem {
public:
    void Update(float deltaTime);                 // （无法转换文件编码：./src/AnimationSystem.h）



>>> 文件: ./src/Application.cpp <<<
//version v1.1
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include "Renderer.h"
#include "VertexBuffer.h"
#include "IndexBuffer.h"
#include "VertexArray.h"
#include "Shader.h"
#include "Texture.h"
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include "imgui/imgui.h"
#include "imgui/imgui_impl_glfw.h"
#include "imgui/imgui_impl_opengl3.h"
#include "Skybox.h"
#include "Particle.h"


#include "Camera.h"
#include "Scene.h"
#include "ResourceManager.h"
#include "EntityController.h"
#include "CameraController.h"
#include "color.h"
#include "Light.h"
#include "LightController.h"
#include "SceneManager.h"
#include "Quad.h"
#include <map>

#include "opencv2/opencv.hpp"
#include "ShaderStorageBuffer.h"
#include "Filter.h"
#include "BVHTree.h"
#include "TextureManager.h"
#include "TriangleSubdivider.h"
#include "EngineState.h"
#include "Octree.h"
#include "NGFX_Injection.h"
#include "NVIDIA_Nsight.h"
#include "ModelManager.h"
#include "MaterialManager.h"
#include "LightManager.h"


extern std::vector<Material> g_MaterialList;
extern TextureManager g_TextureManager;
extern MaterialManager g_MaterialManager;
extern LightManager g_LightManager;

EngineState g_EngineState;
SceneManager g_SceneManager(nullptr);

float deltaTime = 0.0f; // （无法转换文件编码：./src/Application.cpp）



>>> 文件: ./src/BVHTree.cpp <<<
#include "BVHTree.h"

BVHTree::BVHTree(const std::vector<Triangle>& triangles) {
    // （无法转换文件编码：./src/BVHTree.cpp）



>>> 文件: ./src/BVHTree.h <<<
#pragma once
#include "Mesh.h"
#include <algorithm>
#include "AABB.h"


struct BVHNode {
    AABB bounds;
    int left;   // （无法转换文件编码：./src/BVHTree.h）



>>> 文件: ./src/Camera.cpp <<<
#include "Camera.h"
#include <glm/gtc/matrix_transform.hpp>
#include <glm/ext/matrix_clip_space.hpp>
#include <iostream>
#define Y_LOCKED true

Camera::Camera(float fov, float aspectRatio, float nearClip, float farClip)
    :m_CameraPosition(glm::vec3(0.0f, 0.0f, 3.0f)),
    m_TargetPosition(glm::vec3(0.0f, 0.0f, 0.0f)),
    m_UpDirection(glm::vec3(0.0f, 1.0f, 0.0f)),
    m_Fov(fov),m_AspectRatio(aspectRatio),
    m_NearClip(nearClip), m_FarClip(farClip),
    m_FocusDepth(0.9f), m_FocusRange(0.1f), m_MaxBlur(0.02f)
{
    m_ProjectionMatrix = glm::perspective(
        glm::radians(m_Fov),      // （无法转换文件编码：./src/Camera.cpp）



>>> 文件: ./src/Camera.h <<<
#pragma once
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include <string>
#include "Shader.h"

class Camera {
private:
    glm::vec3 m_CameraPosition;
    glm::vec3 m_TargetPosition;
    glm::vec3 m_UpDirection;
    glm::mat4 m_ViewMatrix;
    glm::mat4 m_ProjectionMatrix;
    float m_AspectRatio;
    float m_NearClip;
    float m_FarClip;
    float m_Fov;
    float m_Rate;
    float m_FocusDepth;   // （无法转换文件编码：./src/Camera.h）



>>> 文件: ./src/CameraController.cpp <<<
#include "CameraController.h"

CameraController::CameraController(Camera* camera, GLFWwindow* window)
    : camera(camera), window(window), movementSpeed(2.5f), mouseSensitivity(0.1f), zoomLevel(45.0f),
    lastX(0.0f), lastY(0.0f), firstMouse(true),locked(true)
{
    // （无法转换文件编码：./src/CameraController.cpp）



>>> 文件: ./src/CameraController.h <<<
#pragma once
#include "Camera.h"
#include <GLFW/glfw3.h>
#include <imgui/imgui.h>

class CameraController {
public:
    CameraController(Camera* camera, GLFWwindow* window);
    ~CameraController();

    void Update(float deltaTime);               // （无法转换文件编码：./src/CameraController.h）



>>> 文件: ./src/color.h <<<
#pragma once
#include "imgui/imgui.h"
#include "imgui/imgui_impl_glfw.h"
#include "imgui/imgui_impl_opengl3.h"
//